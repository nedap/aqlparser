buildscript {
    repositories {
        maven {
            url "https://nedap.jfrog.io/artifactory"
            credentials {
                username = "${artifactory_user}"
                password = "${artifactory_password}"
            }
            name = "maven-main-cache"
        }
    }
    dependencies {
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:3.0.1"
    }
}

plugins {
    id 'java'
    id 'antlr'
    id "com.jfrog.artifactory" version "4.15.2"
    id 'maven'
    id "maven-publish"
    id 'jacoco'
}

sourceCompatibility = '1.8'
targetCompatibility = '1.8'
group = 'com.nedap.healthcare'
version = '0.0.13'

repositories {
    add buildscript.repositories.getByName("maven-main-cache")
    jcenter()
}

dependencies {
    antlr group: 'org.antlr', name: 'antlr4', version: '4.8-1'

    compile group: 'com.nedap.healthcare.archie', name: 'archie-all', version: '0.11.1'

    testCompile 'junit:junit:4.12'

}

generateGrammarSource {
    arguments += ["-visitor", "-package", "com.nedap.healthcare.aqlparser"]
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'aqlparser'
            from components.java
        }
    }
}

artifactory {
    contextUrl = "https://nedap.jfrog.io/artifactory"
    publish {
        repository {
            repoKey = 'libs-releases-local'
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true
        }
        defaults {
            publications('mavenJava')
            publishArtifacts = true
            properties = ['qa.level': 'basic', 'dev.team' : 'core']
            publishPom = true
        }
    }
    resolve {
        repository {
            repoKey = 'libs-releases'
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true
        }
    }
}

jacoco {
    toolVersion = "0.8.5"
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled false
    }
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, excludes: [
                    // Exclude auto generated antlr files
                    'com/nedap/healthcare/aqlparser/**'
            ])
        })
    }
}